{
  "version": 3,
  "sources": [
    "userApp.js",
    "userFact.js",
    "userManagerController.js"
  ],
  "names": [
    "myApp",
    "config",
    "$routeProvider",
    "$locationProvider",
    "when",
    "templateUrl",
    "baseUrl",
    "controller",
    "otherwise",
    "factory",
    "$rootScope",
    "httpFact",
    "user",
    "allUser",
    "getUserList",
    "this",
    "fetchUserList",
    "url",
    "getRequest",
    "then",
    "response",
    "saveNewUser",
    "userObj",
    "saveUrl",
    "headers",
    "Content-type",
    "postRequest",
    "$broadcast",
    "data",
    "deleteUser",
    "id",
    "deleteUrl",
    "updateUser",
    "userData",
    "updateUrl",
    "$scope",
    "$location",
    "$q",
    "userFact",
    "userNgGrid",
    "$on",
    "event",
    "push",
    "angular",
    "extend",
    "newUser",
    "name",
    "email",
    "password",
    "cPassword",
    "errorMessages",
    "paginationPageSizes",
    "paginationPageSize",
    "enableFiltering",
    "columnDefs",
    "field",
    "maxWidth",
    "enableCellEdit",
    "displayName",
    "enableSorting",
    "editableCellTemplate",
    "editDropdownOptionsArray",
    "value",
    "editDropdownIdLabel",
    "editDropdownValueLabel",
    "sort",
    "cellTemplate",
    "saveRow",
    "onRegisterApi",
    "gridApi",
    "rowEdit",
    "on",
    "userAddForm",
    "path",
    "status",
    "header",
    "console",
    "log",
    "forEach",
    "key",
    "toString",
    "rowEntity",
    "promise",
    "setSavePromise",
    "deleteRow",
    "row",
    "entity",
    "alert",
    "index",
    "indexOf",
    "splice"
  ],
  "mappings": "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",
  "file": "userModule.js",
  "sourcesContent": [
    "/**\n * Created by amitav on 10/2/15.\n */\n\nmyApp.config(['$routeProvider', '$locationProvider', function ($routeProvider, $locationProvider) {\n\n    $routeProvider.when('/user', {\n        templateUrl: baseUrl + 'ng_templates/users/user-list.html',\n        controller: 'userController'\n    });\n\n    $routeProvider.when('/user/add', {\n        templateUrl: baseUrl + 'ng_templates/users/user-add.html',\n        controller: 'userController'\n    });\n\n    $routeProvider.otherwise('/');\n}]);",
    "/**\n * Created by amitav on 10/3/15.\n */\nmyApp.factory('userFact', ['$rootScope', 'httpFact', function ($rootScope, httpFact) {\n    var user = {};\n\n    user.allUser = '';\n\n    /**\n     * Call this function to get the user list.\n     * Internally it will call the fetch function if the object is not set already\n     *\n     * @returns {string|*}\n     */\n    user.getUserList = function () {\n        return this.allUser === '' ? this.fetchUserList() : this.allUser;\n    };\n\n    /**\n     * This function will always make an ajax request to fetch the list of users\n     * from the database. This should not be called directly.\n     *\n     * @returns {string|*}\n     */\n    user.fetchUserList = function () {\n        var url = baseUrl + 'api/user/list';\n\n        this.allUser = httpFact.getRequest(url).then(function (response) {\n            return response;\n        });\n\n        return this.allUser;\n    };\n\n    /**\n     * Save a new user to the database by calling the post url\n     *\n     * @param userObj\n     * @returns {*}\n     */\n    user.saveNewUser = function (userObj) {\n        var saveUrl = baseUrl + 'api/user/save';\n\n        var headers = {\n            'Content-type': 'application/json'\n        };\n\n        return httpFact.postRequest(userObj, saveUrl, headers).then(function (response) {\n            $rootScope.$broadcast('newUserAdded', response.data);\n            return response.data;\n        });\n    };\n\n    /**\n     * Delete the user by passing id\n     *\n     * @param id\n     * @returns {*}\n     */\n    user.deleteUser = function (id) {\n        var deleteUrl = baseUrl + 'api/user/delete';\n\n        var headers = {\n            'Content-type': 'application/json'\n        };\n\n        return httpFact.postRequest(id, deleteUrl, headers).then(function (response) {\n            return response;\n        });\n    };\n\n    /**\n     * Update the user from the ui grid request change\n     *\n     * @param userData\n     * @returns {*}\n     */\n    user.updateUser = function (userData) {\n        var updateUrl = baseUrl + 'api/user/update';\n\n        var headers = {\n            'Content-type': 'application/json'\n        };\n\n        return httpFact.postRequest(userData, updateUrl, headers).then(function (response) {\n            return response;\n        });\n    };\n\n    return user;\n}]);",
    "/**\n * Created by amitav on 10/2/15.\n */\nmyApp.controller('userController', ['$scope', '$location', '$q', 'userFact',\n    function ($scope, $location, $q, userFact) {\n\n        /*Setting the users after getting data from factory*/\n        userFact.getUserList().then(function (response) {\n            $scope.userNgGrid.data = response.data;\n        });\n\n        /*Update the user list of factory broadcast*/\n        $scope.$on('newUserAdded', function (event, data) {\n            $scope.userNgGrid.data.push(data);\n        });\n\n        /*Variables*/\n        angular.extend($scope, {\n            newUser: {\n                name: 'Amitav',\n                email: 'reachme@amitavroy.com',\n                password: 'password',\n                cPassword: 'password'\n            },\n            errorMessages: [],\n            userNgGrid: {\n                paginationPageSizes: [10, 20, 30],\n                paginationPageSize: 10,\n                enableFiltering: true,\n                columnDefs: [\n                    {field: 'id', maxWidth: '90', enableCellEdit: false},\n                    {field: 'name', displayName: 'Display name'},\n                    {field: 'email', enableSorting: false, enableCellEdit: false},\n                    {\n                        field: 'status', maxWidth: '120',\n                        editableCellTemplate: 'ui-grid/dropdownEditor',\n                        editDropdownOptionsArray: [\n                            {name: 'Active', value: 'Active'},\n                            {name: 'Inactive', value: 'Inactive'}\n                        ],\n                        editDropdownIdLabel: 'value',\n                        editDropdownValueLabel: 'name',\n                    },\n                    {\n                        name: 'Ops',\n                        sort: false,\n                        maxWidth: 100,\n                        cellTemplate: '<p style=\"text-align: center\"><i class=\"fa fa-ban\" ng-click=\"grid.appScope.deleteRow(row)\"></i></p>'\n                    }\n                ],\n                saveRow: $scope.saveRow,\n                onRegisterApi: function (gridApi) {\n                    $scope.gridApi = gridApi;\n                    gridApi.rowEdit.on.saveRow($scope, $scope.saveRow);\n                }\n            }\n        });\n\n        /*Methods*/\n        angular.extend($scope, {\n\n            /*Save the new user after validations*/\n            saveNewUser: function (userAddForm) {\n                if ($scope.newUser.password != $scope.newUser.cPassword) {\n                    $scope.errorMessages.push('The two passwords do not match');\n                    return false;\n                }\n\n                $scope.errorMessages = [];\n\n                userFact.saveNewUser($scope.newUser).then(function (response) {\n                    $location.path('/user');\n                }).catch(function (data, status, header) {\n                    console.log(data, status);\n                    if (status == 403) {\n                        //alert('validation failed');\n                        angular.forEach(data, function (value, key) {\n                            $scope.errorMessages.push(value.toString());\n                        });\n                    }\n                });\n            },\n            /*Updating the user row*/\n            saveRow: function (rowEntity) {\n                var promise = userFact.updateUser(rowEntity);\n                $scope.gridApi.rowEdit.setSavePromise(rowEntity, promise);\n                return promise;\n            },\n            /*Delete the user row*/\n            deleteRow: function (row) {\n                var data = {id: row.entity.id};\n                userFact.deleteUser(data).then(function (response) {\n                    alert('User deleted');\n                    var index = $scope.userNgGrid.data.indexOf(row.entity);\n                    $scope.userNgGrid.data.splice(index, 1);\n                }).catch(function (data, status, header) {\n                    if (status == 403) {\n                        angular.forEach(data, function (value, key) {\n                            $scope.errorMessages.push(value.toString());\n                        });\n                    }\n                });\n            }\n        });\n    }]);"
  ],
  "sourceRoot": "/source/"
}