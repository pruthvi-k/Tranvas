{
  "version": 3,
  "sources": [
    "userApp.js",
    "userFact.js",
    "userManagerController.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACj
  "file": "userModule.js",
  "sourcesContent": [
    "/**\n * Created by amitav on 10/2/15.\n */\n\nmyApp.config(['$routeProvider', '$locationProvider', function ($routeProvider, $locationProvider) {\n\n    $routeProvider.when('/user', {\n        templateUrl: baseUrl + 'ng_templates/users/user-list.html',\n        controller: 'userController'\n    });\n\n    $routeProvider.when('/user/add', {\n        templateUrl: baseUrl + 'ng_templates/users/user-add.html',\n        controller: 'userController'\n    });\n\n    $routeProvider.otherwise('/');\n}]);",
    "/**\n * Created by amitav on 10/3/15.\n */\nmyApp.factory('userFact', ['$rootScope', 'httpFact', function ($rootScope, httpFact) {\n    var user = {};\n\n    user.allUser = '';\n\n    /**\n     * Call this function to get the user list.\n     * Internally it will call the fetch function if the object is not set already\n     *\n     * @returns {string|*}\n     */\n    user.getUserList = function () {\n        return this.allUser === '' ? this.fetchUserList() : this.allUser;\n    };\n\n    /**\n     * This function will always make an ajax request to fetch the list of users\n     * from the database. This should not be called directly.\n     *\n     * @returns {string|*}\n     */\n    user.fetchUserList = function () {\n        var url = baseUrl + 'api/user/list';\n\n        this.allUser = httpFact.getRequest(url).then(function (response) {\n            return response;\n        });\n\n        return this.allUser;\n    };\n\n    /**\n     * Save a new user to the database by calling the post url\n     *\n     * @param userObj\n     * @returns {*}\n     */\n    user.saveNewUser = function (userObj) {\n        var saveUrl = baseUrl + 'api/user/save';\n\n        var headers = {\n            'Content-type': 'application/json'\n        };\n\n        return httpFact.postRequest(userObj, saveUrl, headers).then(function (response) {\n            $rootScope.$broadcast('newUserAdded', response.data);\n            return response.data;\n        });\n    };\n\n    /**\n     * Delete the user by passing id\n     *\n     * @param id\n     * @returns {*}\n     */\n    user.deleteUser = function (id) {\n        var deleteUrl = baseUrl + 'api/user/delete';\n\n        var headers = {\n            'Content-type': 'application/json'\n        };\n\n        return httpFact.postRequest(id, deleteUrl, headers).then(function (response) {\n            return response;\n        });\n    };\n\n    /**\n     * Update the user from the ui grid request change\n     *\n     * @param userData\n     * @returns {*}\n     */\n    user.updateUser = function (userData) {\n        var updateUrl = baseUrl + 'api/user/update';\n\n        var headers = {\n            'Content-type': 'application/json'\n        };\n\n        return httpFact.postRequest(userData, updateUrl, headers).then(function (response) {\n            return response;\n        });\n    };\n\n    return user;\n}]);",
    "/**\n * Created by amitav on 10/2/15.\n */\nmyApp.controller('userController', ['$scope', '$location', '$q', 'userFact',\n    function ($scope, $location, $q, userFact) {\n\n        /*Setting the users after getting data from factory*/\n        userFact.getUserList().then(function (response) {\n            $scope.userNgGrid.data = response.data;\n        });\n\n        /*Update the user list of factory broadcast*/\n        $scope.$on('newUserAdded', function (event, data) {\n            $scope.userNgGrid.data.push(data);\n        });\n\n        /*Variables*/\n        angular.extend($scope, {\n            newUser: {\n                name: 'Amitav',\n                email: 'reachme@amitavroy.com',\n                password: 'password',\n                cPassword: 'password'\n            },\n            errorMessages: [],\n            userNgGrid: {\n                paginationPageSizes: [10, 20, 30],\n                paginationPageSize: 10,\n                enableFiltering: true,\n                columnDefs: [\n                    {field: 'id', maxWidth: '90', enableCellEdit: false},\n                    {field: 'name', displayName: 'Display name'},\n                    {field: 'email', enableSorting: false, enableCellEdit: false},\n                    {\n                        field: 'status', maxWidth: '120',\n                        editableCellTemplate: 'ui-grid/dropdownEditor',\n                        editDropdownOptionsArray: [\n                            {name: 'Active', value: 'Active'},\n                            {name: 'Inactive', value: 'Inactive'}\n                        ],\n                        editDropdownIdLabel: 'value',\n                        editDropdownValueLabel: 'name',\n                    }\n                ],\n                saveRow: $scope.saveRow,\n                onRegisterApi: function (gridApi) {\n                    $scope.gridApi = gridApi;\n                    gridApi.rowEdit.on.saveRow($scope, $scope.saveRow);\n                }\n            }\n        });\n\n        /*Methods*/\n        angular.extend($scope, {\n\n            /*Save the new user after validations*/\n            saveNewUser: function (userAddForm) {\n                if ($scope.newUser.password != $scope.newUser.cPassword) {\n                    $scope.errorMessages.push('The two passwords do not match');\n                    return false;\n                }\n\n                $scope.errorMessages = [];\n\n                userFact.saveNewUser($scope.newUser).then(function (response) {\n                    $location.path('/user');\n                }).catch(function (data, status, header) {\n                    console.log(data, status);\n                    if (status == 403) {\n                        //alert('validation failed');\n                        angular.forEach(data, function (value, key) {\n                            $scope.errorMessages.push(value.toString());\n                        });\n                    }\n                });\n            },\n            /*Updating the user row*/\n            saveRow: function (rowEntity) {\n                var promise = userFact.updateUser(rowEntity);\n                $scope.gridApi.rowEdit.setSavePromise(rowEntity, promise);\n                return promise;\n            }\n        });\n    }]);"
  ],
  "sourceRoot": "/source/"
}